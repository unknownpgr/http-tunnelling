const t = require("net");
function o(e, n, t, o) {
  var r = Buffer.alloc(9 + o.length);
  r.writeUInt8(n, 0),
    r.writeUInt32BE(t, 1),
    r.writeUInt32BE(o.length, 5),
    o.copy(r, 9),
    e.write(r);
}
function r(e, n, t) {
  o(e, 0, n, t);
}
function e(e, n, t) {
  o(e, 3, n, t);
}
function a(e, n) {
  o(e, 1, n, Buffer.alloc(0));
}
function n() {
  let a = Buffer.alloc(0);
  return (e) => {
    a = Buffer.concat([a, e]);
    for (var n = []; 9 <= a.length; ) {
      var t = a.readUInt8(0),
        o = a.readUInt32BE(1),
        r = a.readUInt32BE(5);
      if (a.length < 9 + r) break;
      const e = a.subarray(9, 9 + r);
      (a = a.subarray(9 + r)), n.push({ type: t, id: o, data: e });
    }
    return n;
  };
}
module.exports = { sendData: r, sendLog: e, sendClose: a, getDataParser: n };
const c = "tunnel.unknownpgr.com",
  l = 81,
  s = process.argv[2],
  [i, u] = s.split(":"),
  d = u ? parseInt(u) : 80,
  f = t.createConnection(l, c, () => {
    console.log("Connected to server");
  }),
  g = n(),
  p = {};
function B(n) {
  var e = t.createConnection(d, i, () => {
    console.log("Connected to application");
  });
  e.on("data", (e) => {
    r(f, n, e);
  }),
    e.on("close", () => {
      a(f, n), delete p[n];
    }),
    (p[n] = e);
}
f.on("data", (e) => {
  const { type: n, data: e, id: t } = g(e);
  0 === n && (p[t] || B(t), p[t].write(e)),
    1 === n && p[t] && (p[t].end(), delete p[t]),
    3 === n && console.log(e.toString());
});
