const net=require("net"),crypto=require("crypto"),[applicationAddr,serverAddr]=process.argv.slice(2);function parseAddress(e){var[e,n]=e.split(":");return[e,n?parseInt(n):80]}const[serverIp,serverPort]=parseAddress(serverAddr),[applicationIp,applicationPort]=parseAddress(applicationAddr),clientId=crypto.randomBytes(36).toString("hex");function connect(r){return new Promise((e,n)=>{const o=net.connect(r,()=>{e(o)})})}function join(o){return new Promise((e,n)=>{o.on("close",()=>{e()})})}async function main(){for(;;){const t=await connect({port:serverPort,host:serverIp});t.write(clientId),console.log(`Connected to ${serverIp}:`+serverPort);let o=!1,r;t.on("data",e=>{r||((r=net.createConnection(applicationPort,applicationIp,()=>{console.log("Connected to application")})).pipe(t),t.pipe(r),r.on("close",()=>{console.log("Disconnected from application"),t.unpipe(r),r=null}));var n,e=e.toString();o||([e,n]=e.split("|"),console.log(e),n&&r.write(n),o=!0)}),await join(t)}}main();