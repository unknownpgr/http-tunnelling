const net=require("net"),crypto=require("crypto"),[applicationAddr]=process.argv.slice(2);function parseAddress(e){var[e,o]=e.split(":");return[e,o?parseInt(o):80]}const[serverIp,serverPort]=parseAddress("server.unknownpgr.com:81"),[applicationIp,applicationPort]=parseAddress(applicationAddr),clientId=crypto.randomBytes(36).toString("hex");function connect(t){return new Promise((o,e)=>{const r=net.connect(t,()=>{r.removeAllListeners("error"),o(r)});r.on("error",e=>{o(null)})})}function getSocketReader(e){let r=null,t=Buffer.alloc(0),n=!1;return e.on("data",e=>{t=Buffer.concat([t,e]),r&&(r(t),t=Buffer.alloc(0),r=null)}),e.on("close",()=>{n=!0,r&&r(null)}),e.on("error",e=>{n=!0,r&&r(null)}),()=>new Promise(e=>{var o;0<t.length?(o=t,t=Buffer.alloc(0),e(o)):n?e(null):r=e})}function sleep(o){return new Promise(e=>{setTimeout(e,o)})}const sockets={};async function main(){for(;;){const c=await connect({port:serverPort,host:serverIp});if(null===c)console.log("Server is closed"),console.log("Reconnecting in 5 seconds"),await sleep(5e3);else{console.log(`Connected to ${serverIp}:`+serverPort);var t=getSocketReader(c),n=(c.write(clientId),await t());if(null===n)console.log("Server is closed");else{n=n.toString();console.log("Url: ",n);let e=Buffer.alloc(0),o=-1,r=-1;for(;;){var s=await t();if(null===s){console.log("Server is closed");for(const l in sockets)sockets[l].destroy();break}if(console.log("."),e=Buffer.concat([e,s]),-1===o&&4<=e.length&&(o=e.readUInt32BE(0),e=e.subarray(4)),-1===r&&4<=e.length&&(r=e.readUInt32BE(0),e=e.subarray(4)),-1!==o&&-1!==r&&e.length>=r){const a=e.subarray(0,r),i=(e=e.subarray(r),o);o=-1,r=-1,"close"===a.toString()?sockets[i]&&(console.log("-"+i),sockets[i].destroy(),delete sockets[i]):sockets[i]?sockets[i].write(a):(console.log("+"+i),console.log("Sockets: ",Object.keys(sockets).length),sockets[i]=net.connect({port:applicationPort,host:applicationIp},()=>{sockets[i].write(a),sockets[i].on("data",e=>{var o=Buffer.alloc(8+e.length);o.writeUInt32BE(i,0),o.writeUInt32BE(e.length,4),e.copy(o,8),c.write(o)}),sockets[i].on("close",()=>{var e=Buffer.alloc(13);e.writeUInt32BE(i,0),e.writeUInt32BE(5,4),e.write("close",8),c.write(e)})}))}}}}}}main();