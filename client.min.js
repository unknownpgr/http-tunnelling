const net=require("net"),crypto=require("crypto"),[applicationAddr]=process.argv.slice(2);function parseAddress(o){var[o,e]=o.split(":");return[o,e?parseInt(e):80]}const[serverIp,serverPort]=parseAddress("server.unknownpgr.com:81"),[applicationIp,applicationPort]=parseAddress(applicationAddr),clientId=crypto.randomBytes(36).toString("hex");function connect(r){return new Promise((o,e)=>{const n=net.connect(r,()=>{o(n)})})}function join(n){return new Promise((e,o)=>{n.on("close",()=>{e()}),n.on("error",o=>{console.log("Client error"),console.log(o),e()})})}async function main(){for(;;){const e=await connect({port:serverPort,host:serverIp});e.write(clientId),console.log(`Connected to ${serverIp}:`+serverPort);let r;let t=!1;e.on("data",n=>{if(r||((r=net.createConnection(applicationPort,applicationIp,()=>{console.log("Connected to application")})).on("close",()=>{console.log("Disconnected from application"),r=null}),r.on("error",o=>{console.log("Application error"),console.log(o),r=null}),r.on("data",o=>{e.write(o)})),t)r.write(n);else{let e="";for(let o=0;o<n.length&&124!==n[o];o++)e+=String.fromCharCode(n[o]);var o=n.slice(e.length+1);console.log("Url: ",e),o&&r.write(o),t=!0}}),await join(e)}}main();