const net=require("net"),crypto=require("crypto"),[applicationAddr]=process.argv.slice(2);function parseAddress(e){var[e,o]=e.split(":");return[e,o?parseInt(o):80]}const[serverIp,serverPort]=parseAddress("server.unknownpgr.com:81"),[applicationIp,applicationPort]=parseAddress(applicationAddr),clientId=crypto.randomBytes(36).toString("hex");function connect(n){return new Promise((e,o)=>{const r=net.connect(n,()=>{e(r)})})}function join(e){return new Promise(o=>{console.log("Joining..."),e.on("close",()=>{o()}),e.on("error",e=>{console.log("Client error"),console.log(e),o()})})}function getSocketReader(e){let r=null,n=Buffer.alloc(0),t=!1;return e.on("data",e=>{n=Buffer.concat([n,e]),r&&(r(n),n=Buffer.alloc(0),r=null)}),e.on("close",()=>{t=!0}),e.on("error",e=>{t=!0}),()=>new Promise(e=>{var o;0<n.length?(o=n,n=Buffer.alloc(0),e(o)):t?e(null):r=e})}const sockets={};async function main(){for(;;){const n=await connect({port:serverPort,host:serverIp});console.log(`Connected to ${serverIp}:`+serverPort);var e=getSocketReader(n),r=(n.write(clientId),await e());if(null===r)console.log("Server is closed");else{let e="",o=0;for(;o<r.length&&124!==r[o];o++)e+=String.fromCharCode(r[o]);console.log("Url: ",e),n.removeAllListeners("data"),n.on("data",async e=>{const r=e.slice(0,4).toString("hex");var o=e.slice(4,8).readUInt32BE(),e=e.slice(8,8+o);sockets[r]?sockets[r].write(e):(o=await connect({port:applicationPort,host:applicationIp}),(sockets[r]=o).write(e),o.on("data",e=>{var o=Buffer.alloc(8+e.length);o.write(r,0,4,"hex"),o.writeUInt32BE(e.length,4),e.copy(o,8),n.write(o)}),o.on("error",e=>{console.log("Application error"),console.log(e),delete sockets[r]}),o.on("close",()=>{delete sockets[r]}))}),await join(n)}}}main();